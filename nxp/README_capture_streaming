# SPDX-License-Identifier: BSD-3-Clause
# Copyright 2023-2024 NXP
===============================================================================
Supported Platforms (and their derivatives):
FEC   : i.MX8MP, i.MX93
===============================================================================
Low latency, uncompressed video from an image sensor at high frame rate
is valuable in applications where real-time processing is required (critical).
Compression at the transmitter and decompression at the receiver incur problems
in automotive and industrial applications.

First, the processing time during compression and decompression generates
an intrinsic latency, which may not be suitable for some delay-sensitive
applications such as autonomous driving. Second, degradation in picture quality
at the receiver is inevitable. Third, HD streaming is confined between
two devices that employ the same compression technique.

The goal of capture_streaming example is to implement an IP camera based on
i.MX8MP or i.MX93 for streaming the uncompressed high-quality video (RTP/RFC4175)
to a host machine in real time.
================================================================================

Use FFplay to serve as a RTP sink
FFplay is a very simple and portable media player using the FFmpeg libraries and the SDL library.
It is mostly used as a testbed for the various FFmpeg APIs.

-------------------------------------------------------------------
Steps to compile and install FFplay on Linux platform
-------------------------------------------------------------------
More Information on building FFplay can be found at: https://trac.ffmpeg.org/wiki/CompilationGuide

To compile FFplay on Linux, do the following:

1. Clone FFmpeg's public GIT repository.
$ git clone https://git.ffmpeg.org/ffmpeg.git ffmpeg/

2. Install necessary packages.
$ sudo apt-get install libsdl2-dev

3. Configure
$ ./configure --enable-ffplay

4. Compile
$ make -j 8

5. Install the libraries.
$ sudo make install

-------------------------------------------------------------------
Steps to configure RTP sink's network
-------------------------------------------------------------------
$ ifconfig eth0 down
$ ifconfig eth0 mtu 9000
$ ifconfig eth0 192.168.1.2

-------------------------------------------------------------------
Steps to run ffplay
-------------------------------------------------------------------
1. Use the SDP file below for testing.
$ cat config.sdp
v=0
o=- 0 0 IN IP4 127.0.0.1
s=RTP streaming
c=IN IP4 192.168.1.2
a=framerate:30
t=0 0
m=video 5004 RTP/AVP 96
a=rtpmap:96 raw/90000
a=fmtp:96 sampling=BGR; width=1280; height=720; depth=8

2. Run ffplay
$ ffplay -an -sn -infbuf -protocol_whitelist "file,udp,rtp" -i config.sdp -strict -2

-------------------------------------------------------------------
Steps to run dpdk-capture_streaming on FEC
-------------------------------------------------------------------
1. Refer to nxp/README for cross compilation setup and bootup parameters configuration.
Append the parameters below to the 'bootargs' variable in U-Boot.
default_hugepagesz=1024MB hugepagesz=1024MB hugepages=1 isolcpus=1

2. Run capture_streaming application on the target board as below.
$ ./dpdk-capture_streaming -c 0x2 -n 1 --vdev 'net_enetfec' -- -d /dev/video0 -w 1280 -h 720 --eth-dest ee:96:53:85:49:6f
